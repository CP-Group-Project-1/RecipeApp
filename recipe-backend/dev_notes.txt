Setting up DRF framework
    - project name = recipe_app

    - WIP on saved_recipes_app
    - WIP on crud for user model
        - Created CRUD methods
    - WIP on validation of:
        - get-token
            - using postman..
                - sent only endpoint response received back is shwoing keys username/password, are required.
                    - assigned email to value for key username, and assignied value to password 
                        - token received
        - Read(Get) for Users
            - Get all users..validated..need to clean up data returned..too much info returned
            - Get single user...validated
        - Update(Put)
            - Is for singleuser..will change peter_griffin@fox.com to pg@fox.com
                - validated, Response returns msg for no updates being applied
                - validated, email and password seperately
                - validated email/password together
        - Delete
            - Is for single user,
                - valiated

    - During validation, attempted to create a superuser and could not, due to 
        not having a username, in the model..
        - Follwoing instructions..https://testdriven.io/blog/django-custom-user-model/
        - Validated cretion of superuser
        - Login via admin endpoint, validated

    - WIP on saved_recipes_app
        - - recipe_id(will be provided by DRF..dont create this field)
        - used_id fk to User        
        - idMeal..this is coming api
            - using api endpoint, www.themealdb.com/api/json/v1/1/list.php?i=list 
            - field type will be SmallAutoField....https://docs.djangoproject.com/en/5.1/ref/models/fields/#smallintegerfield
                - Like an AutoField, but only allows values under a certain (database-dependent) limit. Values from 1 to 32767 are safe in all databases supported by Django.
        - recipe_title

        - Created model
        - Created serializer
        - WIP on CRUD
            - added Read, for all and specific user


        - use this endpoint s reference for idMeal and recipe_title
            - www.themealdb.com/api/json/v1/1/lookup.php?i=52772
                - json data ref
                    "meals": [
                                {
                                    "idMeal": "52772",
                                    "strMeal": "Teriyaki Chicken Casserole",
            - CRUD ops are Read, Delete and Post
        - Updating saved_recipes_app model, field idMeal, to use 5 integres
            - added validators.py and updated model to use it
            - udpated field idMeal to be a charField

        - After building saved_recipes model and asking charGpt to make injection script,
            the current unique assignments for idMeal and recipe_title are global and should
            be for the user only.
            - Discussed with team.. yes it should be for user, alllowing other to save same recipe if needed
        - Discussed with chatGpt and reviewing DRF link, https://docs.djangoproject.com/en/5.1/ref/models/options/#unique-together
            - updated model
    - Injected dummy data
        - Validating
            - Read(Get) All recipes returned for all users
            - Read(Get) All recipes for a single user
            - Post
                - Attempting to post same recipe for a user..Rejected..validation successfull
                - Post unique recipe...validation successfull
            - Delete recipe for single user...validation successfull

    - Cleaned up serilizer data returned for saved_recipes_app
    - WIP on saving recipe to database from front-end
        - Running front-end
            - Created new user thru sign up page
            - Loggin In
            - Selecting recipe
            - Save Recipe..receive, User not logged in(Input worng password)
                - Going back home and logging in
                    - Created a new user
                    - Logged in 
                        - Debugging
                            - Save recipeBtn, is using localStorage to get 'user_id'
                            - Going to Login.jsx
                                - If login is successfull, token is saved in localStorage..user_id is not being saved in localStorage.
                                    - continue with code review..Discussing with team
                                    - Updating Login.jsx to get user_id and will save in localStorage
                                    - Updating view for Hey single user, for when neeing user from token
                                    - Valiation of getting user_id from token, successfull
                            - Back to saveing a recipe
                                - received recipe saved message
                                - validating recipe saved in database
                                    - recipe not found
                                        - debugging
                                        - root cause..context does not have all required data being passed to saveRecipe
                                            - changed key to use from receipt.title to receipe.strMeal in saveRecipe method
                                                - validation of saved recipe to databsae..successfull
                                - For the ingredimts to save, will put ingredients in an array
                                - Realized the saved_recipe model needs a filed for ingredients
                                - Looking up how to save array in field for DRF
                                    - reviewing DRF link, https://docs.djangoproject.com/en/5.1/ref/models/fields/#jsonfield
                                        - reviewing JSONField(A field for storing JSON encoded data. In Python the data is represented in its Python 
                                            native format: dictionaries, lists, strings, numbers, booleans and None.)
                                            - Conitnuing to research, found
                                                - 4. Considerations:
                                                    Performance:
                                                    JSONFields can impact performance, especially when querying based on nested keys. Consider normalizing 
                                                    your data if you need to perform frequent queries on specific JSON keys.

                                                - Asked Googile..does drf support saving an array into a field ?
                                                    - Yes, Django REST Framework (DRF) supports saving arrays into fields, particularly when using 
                                                        PostgreSQL's ArrayField or by encoding arrays as JSON and storing them in a JSONField or a standard field. 
                                                - Reviewing DRF documention for ArrayField, https://docs.djangoproject.com/en/5.1/ref/contrib/postgres/fields/
                                                    - Will need to possibly store a dictionary instead due to needing the Measurement data for each ingrdient
                                                        - so the key will be the ingredient, value its respective measurement amount

                                                - DOuble checked with team.. DO not need to save the ingredients

                                - Rewviewing FrontEnd SavedRecipes.jsx,
                                    - updating uweEffect to get saved recipes from database
                                        - thinking the concept baed on code that expectation is to be array of nested dicts
                                    - validated retriveing recipes for user from db..FrontEnd loading data
                                        - updating backend saved_recipes model to support new feature for diplsying the image of the recipe
                                            - validation successfull

                                    - Checking delete button for SavedRecipes.jsx
                                        - pressed delte button for a meal..removed from FrontEnd page..successfull
                                            - did not remove from database..debugging
                                                - Updating code to submit DELETE request
                                                - validated deletion occurs in database


    - WIP on adding webserver and dockerizing
        - added webserver directory, with Dockerfile, default.conf and dockerignore files
        - adding Parent level files:
            - build-and-push docker image script
            - .dockerignore, .gitignore
            - docker-compose.dev/prod.yml files
            - run_nuild_dev.sh
            - setup-ec2.sh
            - stop_dev.sh

        - Adding files to diretory receip-frontend
            - .dockerignore, .gitignore

        - Starting update front-end to geting the base_url
            - updating the following files: 
                - api/AuthApi.js(DONT_FORGET_THIS_FILE_FOR_UPDATTING)
                    - function signup(updated)
                    - function getRecipe(updated)
                    - function deleteRecipe(udpated)
                    - function saveRecipe(updated)
                    - function login(updated)
                - App.jsx(updated) 
                - pages/Login.jsx(updated)
                - pages/Signup.jsx(updated)
                - pages/Home.jsx(no update)
                - pages/ByCat.jsx(no update)
                - pages/ByIngredient.jsx(no update)
                - pages/ByCuisine.jsx(no update)
                - pages/RecipePage.jsx(updated)
                    - Uses component SaveRecipeBtn
                    - Uses compnent ShopListBtn
                - pages/SavedRecipes(updated)
                - pages/ShoppingList.jsx(no update)
                - components/ProtectedRoute.jsx(no update)
                - components/SaveRecipeBtn(updated)
                - components/SaveIngredientsBtn(no update)
        - updated backend/settings.py

        - WIP on dockerizing
            - building dev containers
            - containers built
            - Able to hit endpoints..
            - created suoer user..validation successfull
            - signing up a user..validation successfull
            - Loggin in
                - stays on page..
                    - debugging(didnt have latest chamges)
                        - pulled latest changes
                - Creating user(Signing up)...validation successfull
                    -Peter Griffin(pg@fox.com)
                    - Marge Simpson(ms@fox.com)
                - Login..validation..successfull
                - Selecting Category
                    - Save recipe..Received Error saving recipe..debugging
                        - Forgot to pass the baseurl prop to SaveRecipeBtn
                    - Updated backend api calls for ngnix to use api/v1
                    - Updated docker-compose.dev file
                - Recipes saving..validation successfull

    - Pushing images to DH..validation..successfull
        - Downloading images from DH..validation successfull
            - Bringing images online..validation successfull
                - Signup, Login, Saving Recipes successfull

    - Updating code to allow for running Front/Back seperately

    - WIP on getting things ready for production and deployment to AWS
    - Updated docker-compose.prod
    - Added run_build_prod.sh
    - Validated that it pulls the images
    - App running 

    - Creating AWS ec2 instance(Recipe_App_Server)
        - Connect your EC2 instance securely via SSH, using the private key file (<file_name>.pem) for authentication
            - ssh -i "golf.pem" ec2-user@ec2-3-135-234-111.us-east-2.compute.amazonaws.com
        - Transfer your SSH key pair (id_rsa and id_rsa.pub) to the .ssh directory on the remote EC2 instance
            - scp -i "golf.pem" id_rsa id_rsa.pub ec2-user@ec2-3-135-234-111.us-east-2.compute.amazonaws.com:~/.ssh
        - Updating allowed host in settings.py with ec2 instance..no need have '*'(wildcard)
        - Copying setup-ec2.sh script to ec2 instance:
            - scp -i ~/.ssh/"golf.pem" setup-ec2.sh ec2-user@ec2-3-135-234-111.us-east-2.compute.amazonaws.com:~/
        - Running setup-ec2.sh script
            - docker and docker compose installed
        - Creating Secrets in AWS Secrets Manager, for database
        - Creating IAM Role & Attach to EC2
        - Copying pull_images.sh script to ec2
            - scp -i ~/.ssh/"golf.pem" pull_images.sh ec2-user@ec2-3-135-234-111.us-east-2.compute.amazonaws.com:~/
        - Copying docker-compose.prod.yml to ec2
            - scp -i ~/.ssh/"golf.pem" docker-compose.prod.yml ec2-user@ec2-3-135-234-111.us-east-2.compute.amazonaws.com:~/ 
        - Running pull_images.sh...images downloaded successfully
        - Executing docker-compose.prod.yml
            - App up and running
                - validated, user signup, login and saving a recipe 


    - Stepping thru App, starting at endpoint/port...http://127.0.0.1:80
        - Saving ingredients
            - received error..[Error] Failed to load resource: the server responded with a status of 404 (Not Found) (shopping_list, line 0)
                - its hiting this endpoint..http://127.0.0.1:8000/shopping_list/...whihc is incorrect
                    - debugging
                        - missing '/api/v1/'
                    - saveShoppingList endpoint needs to be updated
                        - saveShoppingList..updated
                            - called by SaveIngredientsBtn..this need to receive the base_url prop
                                - RecipePage uses SaveIngredientsBtn
                                    - RecipPage aleady receives base_url prop

    - Researching measurement tools for App(nice to have)
        - https://pint.readthedocs.io/en/stable/
            - https://pypi.org/project/Pint/

        - https://github.com/justinmklam/recipe-converter
        - https://python-measurement.readthedocs.io/en/latest/


    - Added automation support for transfering files to ec2 instanace and execution of app on ec2 instance
    - Updated navbar to import logo
        - validation successfull locally and on ec2
        - Attempting to send email..validation unsuccessfull
            - updating docker-compose.prod with SENDGRID_API_KEY variable
                - valiated in ec2 successfull..email sent and received


    
    - Debugging why password not updating even though it accepts the request and saves
        - Did not name the vaiable correctly in the UsersSerializer for instance
         and needed to include the passowrd in the fields..without this the serialzer ignores the field.
         - Did not incldue password in fields because did not want the password being returned in the response
         also needed to add password = serializers.CharField(write_only=True, required=False)
         - validation successfull of password change 


    - WIP on updating the email message to be html format with logo
        - Reviewing DRF documention, https://docs.djangoproject.com/en/5.1/topics/email/
        - Reviwing https://medium.com/@arifcse21/send-and-email-with-html-template-and-context-data-from-a-django-project-e9606644185c
        - Reviewing https://mailtrap.io/blog/python-send-html-email/
        - Reviewing https://medium.com/@akshatgadodia/simplifying-email-sending-in-django-a-step-by-step-guide-7dc90079738b
        - Reviewing https://medium.com/dajngo/email-configuration-in-django-3c7d9e149445
        - Reviewing https://learndjango.com/tutorials/template-structure
        - Reviewing https://docs.djangoproject.com/en/5.1/topics/templates/
        - Reviewing https://medium.com/@KaziMushfiq1234/add-image-or-file-to-drf-project-a0b0f8c3bd7d
        - Reviewing https://docs.djangoproject.com/en/5.1/howto/static-files/
        - Reviewing https://www.w3schools.com/django/django_add_static_files.php
        - Reviewing https://blog.idrsolutions.com/how-to-display-base64-images-in-html/
        - Reviewing https://medium.com/@mdmarjanhossain0/upload-base64-images-to-the-django-rest-framework-67b58a779b63
        - Reviewing https://sentry.io/answers/how-do-i-display-a-base64-image-in-html/
        - Reviewing https://ahmedyasin487.medium.com/attaching-multiple-images-or-files-to-email-in-django-from-filefield-or-imagefield-9f8421ac2f8c
      

        - Updating TEMPLATES 'DIRS' list object with BASE_DIR / "templates"
            - the Django template loader will look for a project-level templates directory
        - Created 'templates' directory
            - Created file email_shopping_list.html in templates diretory
        - Added static directory, placed image inside directory
        - Email sent..validation..unsuccessfull
            - the email is unable to access the image location..
                - need to include the domain url or conver the image to base64 encoding
                    - researching base64 concept
            - Using site http://base64online.org/encode/ to convert image to Base64
            - Succesfully embedded image into email, however gmail does not support display of base64 encoded images
                - reviewing link, https://stackoverflow.com/questions/46783599/base64-encoded-image-is-not-showing-in-gmail
            - Researching what CIDs are for image embedding
                - Some web mail clients do not render CIDs, consider it spam, so not always consistent across clients
                    - continuing to research
                        - reviewing topic about svg
            - Reviewing https://stackoverflow.com/questions/3787755/django-how-to-send-html-emails-with-embedded-images
            - Reviewing https://www.reddit.com/r/django/comments/mlq730/embedding_images_in_emails_best_practices/
            - Reviewing https://www.pipedrive.com/en/blog/embedding-images-in-emails
            - Discussing with chatgpt
                - ok gmail does not accept base64 we already know that and CID may not work for this case as well so we can rule those out right ?
                    ❌ Base64 embedding
                        •	Gmail does not render base64 images in email body (<img src="data:image/...">).
                        •	Even if the image is small, Gmail will treat it as potentially unsafe or just ignore it.

                    ❌ CID (Content-ID) embedding
                        •	Inconsistent support.
                        •	Gmail and other web-based clients often don’t render images referenced via CID.
                        •	It also requires complex MIME setup, and is better suited for internal systems or Outlook-heavy environments.

                - Creating an ec2 instance jsut to get a logo is overkill of resource..
                - THe image can be sourced from a Public image hosting service and even from GitHub as long as repo is public
                    - SOme email clients will still block this as well ..researching
                        - The safest option for rendering in email is using a Content Delivery Network
                        - Creating account on Cloudinary
                        - Uploaded logo
                            - image url = https://res.cloudinary.com/djpwhgkd0/image/upload/v1743823939/logo_small_pcqrrh.png
                        - Updated html template..valiation succesfull

                    

                    


                
            

        



                                    

























{
    "email": "peter_griffin@fox.com",
    "password": "birdistheword"
}

{
        "idMeal": "99999",
        "recipe_title": "Shepherd's Pie"
       
    }



377aef1c4ef431245d421ae2ec5162a255cd8a70	
